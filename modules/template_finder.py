"""
=== Advanced Template Finder ===

–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
—Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –∫—É—Ä—Å–æ—Ä–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
"""

import cv2
import numpy as np
import pyautogui
import time
import os
import math
from typing import List, Tuple, Optional, Dict

class TemplateFinder:
    def __init__(self, threshold: float = 0.8, scales: List[float] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            threshold: float - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (0.0-1.0)
            scales: List[float] - –¥–∏–∞–ø–∞–∑–æ–Ω –º–∞—Å—à—Ç–∞–±–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        self.threshold = threshold
        self.scales = scales or [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3]
        self._templates = []

    @property
    def templates(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —à–∞–±–ª–æ–Ω–∞–º"""
        return self._templates

    @templates.setter
    def templates(self, template_paths: List[str]):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            template_paths: List[str] - —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —à–∞–±–ª–æ–Ω–æ–≤

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            ValueError: –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
            FileNotFoundError: –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        if not template_paths:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω")

        for path in template_paths:
            if not os.path.exists(path):
                raise FileNotFoundError(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

        self._templates = template_paths

    def _find_best_match(self, screen: np.ndarray) -> Optional[Tuple[Tuple[int, int], Dict]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            screen: np.ndarray - —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenCV

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Tuple[Tuple[int, int], Dict] - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            None - –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        for template_path in self._templates:
            try:
                template = cv2.imread(template_path, cv2.IMREAD_COLOR)
                if template is None:
                    continue

                h, w = template.shape[:2]

                # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∞–º
                for scale in self.scales:
                    scaled_w = int(w * scale)
                    scaled_h = int(h * scale)

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
                    if scaled_w < 5 or scaled_h < 5:
                        continue

                    resized = cv2.resize(template, (scaled_w, scaled_h))
                    result = cv2.matchTemplate(screen, resized, cv2.TM_CCOEFF_NORMED)
                    _, max_val, _, max_loc = cv2.minMaxLoc(result)

                    if max_val >= self.threshold:
                        center_x = max_loc[0] + scaled_w // 2
                        center_y = max_loc[1] + scaled_h // 2
                        return (
                            (center_x, center_y),
                            {
                                'template': os.path.basename(template_path),
                                'confidence': round(max_val, 4),
                                'scale': round(scale, 2),
                                'position': (center_x, center_y),
                                'size': (scaled_w, scaled_h)
                            }
                        )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞ {template_path}: {str(e)}")
                continue

        return None

    def find_and_move(self, delay: float = 0, verbose: bool = True) -> Optional[Dict]:
        """
        –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            delay: float - –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            verbose: bool - –≤—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            None - –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not self._templates:
            raise ValueError("–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω")

        if delay > 0:
            time.sleep(delay)

        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
            screenshot = pyautogui.screenshot()
            screen = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
            return None

        result = self._find_best_match(screen)

        if result:
            (target_x, target_y), match_info = result
            current_x, current_y = pyautogui.position()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            distance = math.sqrt((target_x - current_x)**2 + (target_y - current_y)**2)
            duration = min(max(0.1, distance / 1000), 0.3)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

            if verbose:
                print(f"\n–ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {match_info['template']}")
                print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match_info['confidence']*100:.1f}%")
                print(f"–ú–∞—Å—à—Ç–∞–±: {match_info['scale']}x")
                print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {match_info['position']}")
                print(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: {distance:.0f} px –∑–∞ {duration:.2f} —Å–µ–∫")

            # –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
            pyautogui.moveTo(target_x, target_y, duration=duration)

            return match_info

        if verbose:
            print("\n–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:")
            print(" - " + "\n - ".join(os.path.basename(p) for p in self._templates))
            print(f"–ü–æ—Ä–æ–≥: {self.threshold}, –ú–∞—Å—à—Ç–∞–±—ã: {self.scales}")

        return None


# template_finder.py
class BaitApplier:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–∏–≤–∫–∏ –≤ Albion Online"""

    def __init__(self, threshold: float = 0.8):
        self.finder = TemplateFinder(threshold=threshold)

    def apply_bait(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–∏–≤–∫–∏"""
        try:
            # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            pyautogui.press('i')
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞

            # 2. –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –Ω–∞–∂–∏–≤–∫–µ
            self.finder.templates = [
                'img/bait.png',
                'img/bait_low.png',
                'img/bait_small.png',
                'img/bait_small_low.png'
            ]
            if not self.finder.find_and_move(delay=0.5):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∂–∏–≤–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
                return False

            pyautogui.click()
            time.sleep(0.5)

            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.finder.templates = [
                'img/use_bait.png',
                'img/use_bait_small.png'
            ]
            if not self.finder.find_and_move(delay=0.5):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return False

            # 4. –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.finder.templates = [
                'img/use_the_bait.png',
                'img/use_the_bait_small.png'
            ]
            if not self.finder.find_and_move(delay=0.5):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
                return False

            pyautogui.click()
            time.sleep(0.5)

            # 5. –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            pyautogui.press('esc')
            time.sleep(0.5)

            print("ü™± –ù–∞–∂–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∂–∏–≤–∫–∏: {str(e)}")
            return False


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã TemplateFinder –∏ BaitApplier"""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ===")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TemplateFinder
    finder = TemplateFinder(threshold=0.8)
    finder.templates = ['img/bait.png']
    result = finder.find_and_move()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BaitApplier
    bait_applier = BaitApplier()
    if bait_applier.apply_bait():
        print("–ù–∞–∂–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–∂–∏–≤–∫—É")


if __name__ == "__main__":
    main()