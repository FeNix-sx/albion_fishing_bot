"""
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä—ã–±–∞–ª–∫–∏:
1. –ü–æ–∏—Å–∫ –ø–æ–ø–ª–∞–≤–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥—Å–µ—á–∫–∏
3. –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–π–º–∞–Ω–Ω–æ–π —Ä—ã–±—ã
–†–∞–±–æ—Ç–∞–µ—Ç —Å —à–∞–±–ª–æ–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø–ª–∞–≤–∫–∞ (float_small.jpg).
"""

import cv2
import numpy as np
from random import uniform, randint
from mss.windows import MSS as mss
import time
import pyautogui as pg
from dataclasses import dataclass
from typing import Tuple, Optional


@dataclass
class ScreenResolution:
    width: int
    height: int

    @classmethod
    def get_current(cls) -> 'ScreenResolution':
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
        return cls(width=pg.size().width, height=pg.size().height)

    def get_scale_factor(self, reference_width: int = 2560, reference_height: int = 1440) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        return (self.width / reference_width, self.height / reference_height)


@dataclass
class MonitorConfig:
    top: int
    left: int
    width: int
    height: int

    @classmethod
    def create_for_resolution(cls, screen_resolution: ScreenResolution) -> 'MonitorConfig':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        scale_x, scale_y = screen_resolution.get_scale_factor()

        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è 2560x1440
        base_top = 700
        base_left = 1100
        base_width = 350
        base_height = 100

        return cls(
            top=int(base_top * scale_y),
            left=int(base_left * scale_x),
            width=int(base_width * scale_x),
            height=int(base_height * scale_y)
        )


class FishingBot:
    def __init__(self, template_path: str):
        self.template = cv2.imread(template_path, cv2.IMREAD_GRAYSCALE)
        self.w, self.h = self.template.shape[::-1]
        self.screen_resolution = ScreenResolution.get_current()
        self.monitor_config = MonitorConfig.create_for_resolution(self.screen_resolution)
        self.screen_capture = mss()
        self.time_list = []
        self.btn_click = False
        self.last_position: Optional[int] = None
        self.catches = 0
        self.was_float_visible = False
        self.last_float_time = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–ø–ª–∞–≤–∫–∞

        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –Ω–∞–∂–∞—Ç–∏—è (–¥–ª—è 2560x1440)
        self.base_press_range = (190, 215)
        self.base_release_range = (220, 235)

        # print("\nüé£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏")
        # print(f"üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: {self.screen_resolution.width}x{self.screen_resolution.height}")
        # print(f"üîç –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: {self.monitor_config.__dict__}")
        # print("-" * 50)

    def get_screen(self) -> np.ndarray:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞"""
        return np.array(self.screen_capture.grab(self.monitor_config.__dict__))

    def find_float_position(self, frame: np.ndarray) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ø–ª–∞–≤–∫–∞ –Ω–∞ –∫–∞–¥—Ä–µ"""
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        res = cv2.matchTemplate(gray_frame, self.template, cv2.TM_CCOEFF_NORMED)
        loc = np.where(res >= 0.7)

        if np.size(loc) == 0:
            return None

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        return loc[1][0] if len(loc[1]) > 0 else None

    def get_scaled_ranges(self) -> Tuple[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        scale_x, _ = self.screen_resolution.get_scale_factor()

        press_min = int(self.base_press_range[0] * scale_x)
        press_max = int(self.base_press_range[1] * scale_x)
        release_min = int(self.base_release_range[0] * scale_x)
        release_max = int(self.base_release_range[1] * scale_x)

        return (randint(press_min, press_max), randint(release_min, release_max))

    def handle_float_position(self, position: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ø–ª–∞–≤–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏"""
        self.last_position = position
        self.time_list.append(time.time())
        self.was_float_visible = True
        self.last_float_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        press_range, release_range = self.get_scaled_ranges()

        if position < press_range:
            pg.mouseDown(button="left")
            self.btn_click = True
        elif position > release_range and self.btn_click:
            pg.mouseUp(button='left')
            self.btn_click = False

        time.sleep(uniform(0.02, 0.05))

    def handle_float_disappearance(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–æ–ø–ª–∞–≤–∫–∞"""
        if self.was_float_visible:
            self.catches += 1
            print(f"\nüé£ –ü–æ–π–º–∞–ª! –í—Å–µ–≥–æ —É–ª–æ–≤: {self.catches} üêü")
            self.was_float_visible = False
            if self.btn_click:
                pg.mouseUp(button='left')
                self.btn_click = False

    def check_float_timeout(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ 3 —Å–µ–∫—É–Ω–¥—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–ø–ª–∞–≤–∫–∞"""
        if self.last_float_time is None:
            self.last_float_time = time.time()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            return False

        return (time.time() - self.last_float_time) > 3

    def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            while True:
                start_time = time.time()

                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
                frame = self.get_screen()
                position = self.find_float_position(frame)

                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ FPS –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ–ø–ª–∞–≤–∫–∞
                fps = 1 / (time.time() - start_time)
                # position_indicator = "üéØ" if position is not None else "‚ùå"
                # bite_status = "üé£ –ö–õ–Æ–Å–¢!!!" if self.btn_click else ""

                # print(f"\rFPS: {fps:.2f} | "
                #       f"–ü–æ–∑–∏—Ü–∏—è: {position_indicator} {position if position is not None else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'} | "
                #       f"{bite_status}", end="")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ø–ª–∞–≤–∫–∞ –∏–ª–∏ –µ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
                if position is not None:
                    self.handle_float_position(position)
                else:
                    self.handle_float_disappearance()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–ø–ª–∞–≤–∫–∞
                    if self.check_float_timeout():
                        # print("\n\n‚è≥ –ü–æ–ø–ª–∞–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                        break
                    # –ï—Å–ª–∏ —Ä—ã–±–∞ –ø–æ–π–º–∞–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
                    if self.catches > 0:
                        break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥
                if cv2.waitKey(25) & 0xFF == ord("q"):
                    print("\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
                    break

        finally:
            cv2.destroyAllWindows()
            self.screen_capture.close()

    def stop(self):
        """–ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ü–∏–∫–ª while)."""
        self._running = False  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ñ–ª–∞–≥

def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = FishingBot("img/float_small.jpg")
    bot.run()


if __name__ == "__main__":
    main()