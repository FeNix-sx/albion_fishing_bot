"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ Albion Online.
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–∏–≤–∫–∏.
"""

import time
import pyautogui
import os
from collections import defaultdict
from modules.audio_detector import AudioDetectorEnhanced
from modules.fishing_bot import FishingBot
from modules.auto_mouse_click import AutoMouseClick
from modules.screen_divider import ScreenDivider
from modules.item_recognizer import ItemRecognizer
from template_finder import BaitApplier


class FishingManager:
    def __init__(self):
        self.catch_stats = defaultdict(int)
        self.recognizer = ItemRecognizer()
        self.use_bait = False
        self.bait_remaining = 0
        self.last_bait_time = None
        self.bait_applier = BaitApplier()

    def print_header(self, target):
        bait_status = " (—Å –Ω–∞–∂–∏–≤–∫–æ–π)" if self.use_bait else ""
        print(f"\nüéØ –¶–µ–ª—å: –ø–æ–π–º–∞—Ç—å {target} —Ä—ã–±{bait_status}")
        print("‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)

    def countdown(self):
        print("\n‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ...")
        for i in range(3, 0, -1):
            print(f"–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ {i}...")
            time.sleep(1)
        print("\nüé£ –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≤–ª—é!")

    def process_catch(self, total, target):
        time.sleep(1.2)
        screenshot = "temp_catch.png"
        pyautogui.screenshot(screenshot)

        item_name, count, _ = self.recognizer.process_image(screenshot)
        if item_name:
            self.catch_stats[item_name] += count
            print(f"üéâ –†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞! –í—Å–µ–≥–æ: {total}/{target}")
            print(f"üêü –ü–æ–π–º–∞–Ω–æ: {item_name} ({count} —à—Ç)")

            if self.use_bait:
                self.bait_remaining -= 1
                print(f"ü™± –ù–∞–∂–∏–≤–∫–∞: –æ—Å—Ç–∞–ª–æ—Å—å {self.bait_remaining}/10 —Ä—ã–±")
        else:
            print("üéâ –†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞! (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å)")

        try:
            os.remove(screenshot)
        except:
            pass

    def print_summary(self):
        print("\n" + "-" * 50)
        print("–í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ:")
        for item, count in self.catch_stats.items():
            print(f"{item.ljust(25)} {'-' * (10 - len(str(count)))} {count} —à—Ç")

        if self.use_bait:
            print(f"\nü™± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞–∂–∏–≤–æ–∫: {self.catch_stats.get('–ù–∞–∂–∏–≤–∫–∞', 0)}")
        print("\nüéä –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")


def get_target_with_bait():
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å 10 –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–∂–∏–≤–∫–∏"""
    while True:
        try:
            target = int(input("üéØ –°–∫–æ–ª—å–∫–æ —Ä—ã–± –Ω—É–∂–Ω–æ –ø–æ–π–º–∞—Ç—å? (–∫—Ä–∞—Ç–Ω–æ 10): "))
            if target % 10 == 0:
                return target
            print("‚ö†Ô∏è –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–∂–∏–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫—Ä–∞—Ç–Ω–æ–µ 10 (10, 20, 30...)")
        except ValueError:
            print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")


def ask_about_bait():
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–∂–∏–≤–∫–∏"""
    while True:
        answer = input("ü™± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∂–∏–≤–∫—É? (–¥–∞/–Ω–µ—Ç): ").lower()
        if answer in ['–¥–∞', '–¥', 'yes', 'y']:
            return True
        elif answer in ['–Ω–µ—Ç', '–Ω', 'no', 'n']:
            return False
        print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")


def main():
    print("\nüéÆ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä—ã–±–∞–ª–∫–∏")

    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–∞–∂–∏–≤–∫—É
    manager = FishingManager()
    manager.use_bait = ask_about_bait()

    # 2. –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã
    if manager.use_bait:
        target = get_target_with_bait()
    else:
        target = int(input("\nüéØ –°–∫–æ–ª—å–∫–æ —Ä—ã–± –Ω—É–∂–Ω–æ –ø–æ–π–º–∞—Ç—å? "))

    # 3. –í—ã–±–æ—Ä –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
    divider = ScreenDivider(rows=7, cols=9).setup()
    mouse_click = AutoMouseClick(delta_time=0.08)
    detector = AudioDetectorEnhanced("template_mono.json")

    # 4. –ó–∞–ø—É—Å–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
    manager.print_header(target)
    manager.countdown()

    # 5. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ –∏ –∫–ª–∏–∫
    screen_width, screen_height = pyautogui.size()
    center_x, center_y = screen_width // 2, screen_height // 2
    pyautogui.moveTo(center_x, center_y, duration=0.5)
    pyautogui.click()
    time.sleep(0.5)

    # 6. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∂–∏–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if manager.use_bait:
        if manager.bait_applier.apply_bait():
            manager.bait_remaining = 10
            manager.last_bait_time = time.time()
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–∂–∏–≤–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–µ")
            manager.use_bait = False

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä—ã–±–∞–ª–∫–∏
    total = 0
    while total < target:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–π –Ω–∞–∂–∏–≤–∫–∏
            if manager.use_bait and (manager.bait_remaining <= 0 or
                                     (time.time() - manager.last_bait_time) >= 600):  # 10 –º–∏–Ω—É—Ç
                print("\nü™± –ù–∞–∂–∏–≤–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é...")
                # –°–Ω–æ–≤–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä –∏ –∫–ª–∏–∫–∞–µ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞–∂–∏–≤–∫–∏
                pyautogui.moveTo(center_x, center_y, duration=0.5)
                pyautogui.click()
                time.sleep(0.5)

                if manager.bait_applier.apply_bait():
                    manager.bait_remaining = 10
                    manager.last_bait_time = time.time()
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–∂–∏–≤–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–µ")
                    manager.use_bait = False

            divider.move_to_random_area()
            mouse_click.run(divider.current_delay)
            detector.run()

            img: str = "img/float_small.jpg"
            bot = FishingBot(img)
            bot.run()

            if bot.catches > 0:
                total += 1
                manager.process_catch(total, target)

            if total < target:
                time.sleep(3)

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

    manager.print_summary()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")