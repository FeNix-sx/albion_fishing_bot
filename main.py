"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ Albion Online.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:
1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é (AutoMouseClick)
2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ (ScreenDivider)
3. –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–ª–µ–≤–∫–∏ (AudioDetectorEnhanced)
4. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–ª–æ–≤–∞ (ItemRecognizer)
5. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä—ã–±–∞–ª–∫–∏ (FishingBot)
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ü–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—ã–±.
"""
import time
import pyautogui
import os
from collections import defaultdict
from modules.audio_detector_single import AudioDetectorEnhanced
from modules.fishing_bot import FishingBot
from modules.auto_mouse_click import AutoMouseClick
from modules.screen_divider import ScreenDivider
from modules.item_recognizer import ItemRecognizer


class FishingManager:
    def __init__(self):
        self.catch_stats = defaultdict(int)
        self.recognizer = ItemRecognizer()

    def print_header(self, target):
        print(f"\nüéØ –¶–µ–ª—å: –ø–æ–π–º–∞—Ç—å {target} —Ä—ã–±")
        print("‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)

    def countdown(self):
        print("\n‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ...")
        for i in range(3, 0, -1):
            print(f"–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ {i}...")
            time.sleep(1)
        print("\nüé£ –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≤–ª—é!")

    def process_catch(self, total, target):
        time.sleep(1.2)
        screenshot = "temp_catch.png"
        pyautogui.screenshot(screenshot)

        item_name, count, _ = self.recognizer.process_image(screenshot)
        if item_name:
            self.catch_stats[item_name] += count
            print(f"üéâ –†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞! –í—Å–µ–≥–æ: {total}/{target}")
            print(f"üêü –ü–æ–π–º–∞–Ω–æ: {item_name} ({count} —à—Ç)")
        else:
            print("üéâ –†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞! (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å)")

        try:
            os.remove(screenshot)
        except:
            pass

    def print_summary(self):
        print("\n" + "-" * 50)
        print("–í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ:")
        for item, count in self.catch_stats.items():
            print(f"{item.ljust(25)} {'-' * (10 - len(str(count)))} {count} —à—Ç")
        print("\nüéä –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")


def main():
    print("\nüéÆ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä—ã–±–∞–ª–∫–∏")
    target = int(input("\nüéØ –°–∫–æ–ª—å–∫–æ —Ä—ã–± –Ω—É–∂–Ω–æ –ø–æ–π–º–∞—Ç—å? "))

    manager = FishingManager()
    divider = ScreenDivider(rows=7, cols=9).setup()
    mouse_click = AutoMouseClick(delta_time=0.08)
    detector = AudioDetectorEnhanced("template_mono.json")

    manager.print_header(target)
    manager.countdown()

    total = 0
    while total < target:
        try:
            divider.move_to_random_area()
            mouse_click.run(divider.current_delay)
            detector.run()

            img:str = "img/float_small.jpg"
            bot = FishingBot(img)
            bot.run()

            if bot.catches > 0:
                total += 1
                manager.process_catch(total, target)

            if total < target:
                time.sleep(3)

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

    manager.print_summary()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")