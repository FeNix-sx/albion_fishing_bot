"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ Albion Online.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:
1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é (AutoMouseClick)
2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ (ScreenDivider)
3. –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–ª–µ–≤–∫–∏ (AudioDetectorEnhanced)
4. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–ª–æ–≤–∞ (ItemRecognizer)
5. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä—ã–±–∞–ª–∫–∏ (FishingBot)
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ü–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—ã–±.
"""

import time
from collections import defaultdict
from audio_detector_single import AudioDetectorEnhanced
from fishing_bot import FishingBot
from auto_mouse_click import AutoMouseClick
from screen_divider import ScreenDivider
from item_recognizer import ItemRecognizer
import pyautogui
import os
import json
import logging
from datetime import datetime


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
def setup_logging():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É logs/ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤"""
    if not os.path.exists('logs'):
        os.makedirs('logs')
    logging.basicConfig(
        filename=f'logs/bot_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log',
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )


def log_error(error_msg, screenshot=False):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    logging.error(error_msg)
    if screenshot:
        try:
            pyautogui.screenshot(f'logs/error_{int(time.time())}.png')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤
setup_logging()


# --- –í–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ) ---
class FishingManager:
    def __init__(self):
        self.catch_stats = defaultdict(int)
        self.recognizer = ItemRecognizer()
        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω FishingManager")

    def print_header(self, target):
        msg = f"–¶–µ–ª—å: –ø–æ–π–º–∞—Ç—å {target} —Ä—ã–±"
        print(f"\nüéØ {msg}")
        logging.info(msg)
        print("‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)

    def countdown(self):
        print("\n‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ...")
        logging.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        for i in range(3, 0, -1):
            print(f"–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ {i}...")
            time.sleep(1)
        print("\nüé£ –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≤–ª—é!")
        logging.info("–õ–æ–≤–ª—è –Ω–∞—á–∞—Ç–∞")

    def process_catch(self, total, target):
        try:
            time.sleep(1.2)
            screenshot = "temp_catch.png"
            pyautogui.screenshot(screenshot)

            item_name, count, _ = self.recognizer.process_image(screenshot)
            if item_name:
                self.catch_stats[item_name] += count
                msg = f"–ü–æ–π–º–∞–Ω–æ: {item_name} ({count} —à—Ç). –í—Å–µ–≥–æ: {total}/{target}"
                print(f"üéâ –†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞! –í—Å–µ–≥–æ: {total}/{target}")
                print(f"üêü {msg}")
                logging.info(msg)
            else:
                msg = "–†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å)"
                print("üéâ " + msg)
                logging.warning(msg)

            if os.path.exists(screenshot):
                os.remove(screenshot)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –≤ process_catch: {e}", screenshot=True)

    def print_summary(self):
        print("\n" + "-" * 50)
        print("–í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ:")
        logging.info("–ò—Ç–æ–≥–∏ –ª–æ–≤–ª–∏:")
        for item, count in self.catch_stats.items():
            line = f"{item.ljust(25)} {'-' * (10 - len(str(count)))} {count} —à—Ç"
            print(line)
            logging.info(line)
        print("\nüéä –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        logging.info("–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")


def load_config():
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
        return None


def main():
    logging.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ===")
    print("\nüéÆ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä—ã–±–∞–ª–∫–∏")

    try:
        target = int(input("\nüéØ –°–∫–æ–ª—å–∫–æ —Ä—ã–± –Ω—É–∂–Ω–æ –ø–æ–π–º–∞—Ç—å? "))
        manager = FishingManager()
        divider = ScreenDivider().setup()
        mouse_click = AutoMouseClick(min_hold_time=0.4, max_hold_time=1.1)
        detector = AudioDetectorEnhanced("template_mono.json")

        manager.print_header(target)
        manager.countdown()

        total = 0
        while total < target:
            try:
                divider.move_to_random_area()
                mouse_click.run()
                detector.run()

                img_float:str = "img/float_small.jpg"
                bot = FishingBot(img_float)
                bot.run()

                if bot.catches > 0:
                    total += 1
                    manager.process_catch(total, target)

                if total < target:
                    time.sleep(3)

            except KeyboardInterrupt:
                print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                logging.warning("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                break
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", screenshot=True)
                continue

        manager.print_summary()

    except Exception as e:
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", screenshot=True)
        print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ logs/")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logging.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    except Exception as e:
        log_error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", screenshot=True)